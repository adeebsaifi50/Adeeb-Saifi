<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Adeeb Tools — Share + Chat</title>
<style>
  :root{
    --bg:#0f0f11; --card:#161617; --muted:#9aa0a6; --accent:#00b894; --glass: rgba(255,255,255,0.04);
  }
  *{box-sizing:border-box}
  body{
    margin:0;
    font-family:Inter,ui-sans-serif,system-ui,Segoe UI,Roboto,"Helvetica Neue",Arial;
    background:linear-gradient(180deg,#070708 0%, #0f0f11 100%);
    color:#e6eef3;
    -webkit-font-smoothing:antialiased;
    -moz-osx-font-smoothing:grayscale;
    min-height:100vh;
    display:flex;
    align-items:center;
    justify-content:center;
    padding:28px;
  }

  .wrap{
    width:100%;
    max-width:980px;
    display:grid;
    grid-template-columns:1fr 420px;
    gap:20px;
  }

  .card{
    background:var(--card);
    border-radius:12px;
    padding:18px;
    box-shadow: 0 6px 18px rgba(2,6,23,0.6);
    border: 1px solid rgba(255,255,255,0.03);
  }

  header.group{
    grid-column:1/-1;
    display:flex;
    align-items:center;
    justify-content:space-between;
    gap:16px;
    margin-bottom:8px;
  }
  header h1{margin:0;font-size:18px}
  header p{margin:0;color:var(--muted);font-size:13px}

  /* LEFT: Share panel + small utilities */
  .share-panel h2{margin:0 0 8px 0;font-size:15px}
  .input-row{display:flex;gap:8px;margin-bottom:12px}
  .input-row input[type="text"]{
    flex:1;padding:10px;border-radius:8px;border:1px solid rgba(255,255,255,0.04);
    background:var(--glass);color:inherit;font-size:14px;
  }
  .input-row button{padding:10px 12px;border-radius:8px;border:none;background:var(--accent);color:#021;cursor:pointer}

  .share-buttons{display:flex;flex-wrap:wrap;gap:10px;margin-bottom:12px}
  .share-buttons button{
    display:inline-flex;align-items:center;gap:8px;padding:10px 12px;border-radius:8px;border:1px solid rgba(255,255,255,0.04);
    background:transparent;color:inherit;cursor:pointer;font-size:14px;
  }
  .share-buttons button .dot{width:10px;height:10px;border-radius:50%}
  .dot.whatsapp{background:#25D366}
  .dot.telegram{background:#26A5E4}
  .dot.x{background:#1DA1F2}
  .dot.copy{background:#9aa0a6}

  .small{font-size:13px;color:var(--muted);margin-top:6px}

  /* RIGHT: Chatbot */
  .chat-area{display:flex;flex-direction:column;height:560px}
  .messages{flex:1;overflow:auto;padding:12px;display:flex;flex-direction:column;gap:10px;}
  .msg{max-width:80%;padding:10px 12px;border-radius:10px;line-height:1.35}
  .msg.user{align-self:flex-end;background:#066d6d;color:#fff;border-bottom-right-radius:4px}
  .msg.bot{align-self:flex-start;background:rgba(255,255,255,0.03);color:var(--muted);border-bottom-left-radius:4px}
  .meta{font-size:12px;color:var(--muted);margin-bottom:6px}

  .typing{
    display:inline-block;height:10px;width:34px;border-radius:6px;background:rgba(255,255,255,0.06);
    position:relative;overflow:hidden;margin-left:4px;
  }
  .typing::after{
    content:'';position:absolute;left:-30px;top:0;width:12px;height:10px;border-radius:6px;
    background:linear-gradient(90deg,transparent,rgba(255,255,255,0.12),transparent);
    animation:typ 1s linear infinite;
  }
  @keyframes typ{100%{left:100%}}

  .chat-controls{display:flex;gap:8px;padding:10px;border-top:1px solid rgba(255,255,255,0.02);align-items:center}
  .chat-controls input{flex:1;padding:10px;border-radius:8px;border:1px solid rgba(255,255,255,0.04);background:transparent;color:inherit}
  .chat-controls button{padding:10px 12px;border-radius:8px;border:none;background:var(--accent);color:#021;cursor:pointer}

  .footer-note{font-size:12px;color:var(--muted);margin-top:10px;text-align:center}

  /* Responsive */
  @media (max-width:920px){
    .wrap{grid-template-columns:1fr; padding:12px}
    .chat-area{height:420px}
  }
</style>
</head>
<body>
  <div class="wrap">
    <div class="card share-panel">
      <header style="display:flex;align-items:center;justify-content:space-between;margin-bottom:12px">
        <div>
          <h2>Share Link</h2>
          <div class="small">Paste a URL (or leave blank to share this page)</div>
        </div>
        <div style="font-size:13px;color:var(--muted)">Easy • No backend</div>
      </header>

      <div class="input-row">
        <input id="urlInput" type="text" placeholder="https://example.com/your-link" aria-label="URL to share" />
        <button id="setBtn">Use</button>
      </div>

      <div class="share-buttons" aria-label="Share Buttons">
        <button id="whatsappBtn"><span class="dot whatsapp"></span> WhatsApp</button>
        <button id="telegramBtn"><span class="dot telegram"></span> Telegram</button>
        <button id="xBtn"><span class="dot x"></span> X (Twitter)</button>
        <button id="copyBtn"><span class="dot copy"></span> Copy Link</button>
        <button id="nativeShareBtn" title="Use native share if supported">Native Share</button>
      </div>

      <div class="small">Tip: If you want to share a file link from your site, paste it above and click <strong>Use</strong>, then click any share button.</div>

      <hr style="margin:14px 0;border:none;border-top:1px solid rgba(255,255,255,0.03)">

      <div>
        <h2 style="margin:0 0 8px 0;font-size:15px">Quick Actions</h2>
        <div style="display:flex;gap:8px;flex-wrap:wrap">
          <button id="openWhatsappWeb">Open WhatsApp Web</button>
          <button id="openTelegramWeb">Open Telegram</button>
          <button id="clearLocal">Clear Saved Link</button>
        </div>
        <div class="small" style="margin-top:10px">Saved link is stored locally on your browser only.</div>
      </div>
    </div>

    <div class="card chat-area" aria-live="polite">
      <div style="display:flex;align-items:center;justify-content:space-between;margin-bottom:8px">
        <div>
          <h2 style="margin:0;font-size:15px">Chat — Adeeb Assistant (Demo)</h2>
          <div class="small">A frontend-only assistant (no external AI). Try questions like "how to upload", "expiry", or "share link".</div>
        </div>
        <div style="display:flex;gap:8px">
          <button id="preset1" title="Try sample question">How to upload?</button>
          <button id="preset2" title="Try sample question">What is expiry?</button>
        </div>
      </div>

      <div class="messages" id="messages" role="log"></div>

      <div class="chat-controls">
        <input id="chatInput" placeholder="Ask me anything (e.g. 'how to share a link')" aria-label="Chat input" />
        <button id="sendBtn">Send</button>
      </div>

      <div class="footer-note">Demo answers are generated from local patterns. For a live AI bot, connect an API key via a secure backend.</div>
    </div>
  </div>

<script>
/* ========= Share logic ========= */
(function(){
  const urlInput = document.getElementById('urlInput');
  const setBtn = document.getElementById('setBtn');
  const copyBtn = document.getElementById('copyBtn');
  const whatsappBtn = document.getElementById('whatsappBtn');
  const telegramBtn = document.getElementById('telegramBtn');
  const xBtn = document.getElementById('xBtn');
  const nativeShareBtn = document.getElementById('nativeShareBtn');
  const openWhatsappWeb = document.getElementById('openWhatsappWeb');
  const openTelegramWeb = document.getElementById('openTelegramWeb');
  const clearLocal = document.getElementById('clearLocal');

  // default link = current page
  const defaultLink = location.href;
  const STORAGE_KEY = 'adeeb_share_link_v1';

  function getLink(){
    return localStorage.getItem(STORAGE_KEY) || urlInput.value.trim() || defaultLink;
  }
  function saveLink(url){ localStorage.setItem(STORAGE_KEY, url); urlInput.value = url; }

  // initialize input with saved or current page
  urlInput.value = localStorage.getItem(STORAGE_KEY) || '';

  setBtn.addEventListener('click', () => {
    const v = (urlInput.value || '').trim();
    if(!v){ alert('Paste a valid URL or leave blank to share the current page.'); return; }
    saveLink(v);
    alert('Saved link for sharing.');
  });

  copyBtn.addEventListener('click', async () => {
    const link = getLink();
    try{
      await navigator.clipboard.writeText(link);
      copyBtn.textContent = 'Copied ✓';
      setTimeout(()=> copyBtn.textContent = 'Copy Link',1200);
    }catch(e){
      prompt('Copy this link:', link);
    }
  });

  whatsappBtn.addEventListener('click', () => {
    const link = encodeURIComponent(getLink());
    // whatsapp web or app
    const url = `https://wa.me/?text=${link}`;
    window.open(url, '_blank');
  });

  telegramBtn.addEventListener('click', () => {
    const link = encodeURIComponent(getLink());
    const url = `https://t.me/share/url?url=${link}`;
    window.open(url, '_blank');
  });

  xBtn.addEventListener('click', () => {
    const link = encodeURIComponent(getLink());
    const text = encodeURIComponent('Check this out: ');
    const url = `https://x.com/intent/tweet?text=${text}${link}`;
    window.open(url, '_blank');
  });

  nativeShareBtn.addEventListener('click', async () => {
    const link = getLink();
    if(navigator.share){
      try{
        await navigator.share({ title: document.title, url: link });
      }catch(e){}
    }else{
      alert('Native share not supported on this device. Use Copy Link or social buttons.');
    }
  });

  openWhatsappWeb.addEventListener('click', ()=> window.open('https://web.whatsapp.com', '_blank'));
  openTelegramWeb.addEventListener('click', ()=> window.open('https://web.telegram.org', '_blank'));
  clearLocal.addEventListener('click', ()=> { localStorage.removeItem(STORAGE_KEY); urlInput.value=''; alert('Saved link removed.'); });

})(); /* share IIFE */

/* ========= Chatbot logic (client-side pattern-based) ========= */
(function(){
  const messagesEl = document.getElementById('messages');
  const chatInput = document.getElementById('chatInput');
  const sendBtn = document.getElementById('sendBtn');
  const preset1 = document.getElementById('preset1');
  const preset2 = document.getElementById('preset2');

  function appendMessage(text, who='bot'){
    const m = document.createElement('div');
    m.className = 'msg ' + (who==='user' ? 'user' : 'bot');
    m.innerHTML = text;
    messagesEl.appendChild(m);
    messagesEl.scrollTop = messagesEl.scrollHeight;
  }

  function appendBotTyping(){
    const m = document.createElement('div');
    m.className = 'msg bot typingWrap';
    m.innerHTML = `<div class="meta">Bot is typing <span class="typing"></span></div>`;
    messagesEl.appendChild(m);
    messagesEl.scrollTop = messagesEl.scrollHeight;
    return m;
  }

  // Simple pattern-response pairs (case-insensitive)
  const patterns = [
    { pattern: /upload|how to upload|file upload|upload file/i,
      reply: `To upload files: go to your upload page, choose the file, click Upload. Use the generated link to share. For auto-expiry, we store a 7-day expiry when uploading.` },

    { pattern: /expiry|expire|delete after|auto-delete/i,
      reply: `Files expire after 7 days (this demo stores an expiry timestamp). To auto-delete files you'll need a scheduled cleanup (cron or cloud function) that removes expired entries.` },

    { pattern: /firebase|firestore|storage/i,
      reply: `This demo supports Firebase Storage + Firestore. In dev mode you can use test rules, but for production secure your rules and avoid embedding secrets in public repos.` },

    { pattern: /transfer.sh|transfer sh/i,
      reply: `transfer.sh is a lightweight file-hosting API useful when you prefer a backend proxy. It's free and simple: browser -> server -> transfer.sh -> returns URL -> store metadata.` },

    { pattern: /share|whatsapp|telegram|twitter|x/i,
      reply: `Use the Share panel to paste a link and click WhatsApp / Telegram / X to share. The Copy Link button copies the URL to clipboard.` },

    { pattern: /password|protected|secure/i,
      reply: `You can add optional password protection by storing a hashed password with the file metadata and prompting users to enter it before download. This requires a little extra logic.` },

    { pattern: /qr|qr code/i,
      reply: `Want QR codes? I can add a QR generator to your site that creates a QR image for any link — works great for mobile users.` },

    { pattern: /github|secret|api key|exposed/i,
      reply: `If you accidentally pushed keys, rotate them immediately and remove from git history (use git filter-branch or BFG). Move secrets to environment variables or secret managers.` },

    { pattern: /who are you|who is this|assistant/i,
      reply: `I'm a frontend demo assistant implemented locally. For a live AI assistant you'd connect a secure backend to an AI API (OpenAI/Gemini) and proxy requests — not recommended to put API keys in frontend.` },

    // fallback
    { pattern: /.*/i,
      reply: `Sorry, I don't have a precise answer for that. Try asking about "upload", "expiry", "share", or "firebase". I can also give quick code snippets for these.` }
  ];

  function findReply(text){
    for(const p of patterns){
      if(p.pattern.test(text)) return p.reply;
    }
    return "Hmm — I don't know that. Try a simpler question like 'How to upload files?' or 'How does expiry work?'.";
  }

  async function handleUser(text){
    if(!text || !text.trim()) return;
    appendMessage(escapeHtml(text), 'user');
    chatInput.value = '';
    // show typing
    const typEl = appendBotTyping();

    // Simulate thinking time depending on length
    const wait = 500 + Math.min(1500, text.length * 20);
    await new Promise(r => setTimeout(r, wait));

    // generate reply
    const reply = findReply(text);
    typEl.remove();
    appendMessage(escapeHtml(reply), 'bot');
  }

  sendBtn.addEventListener('click', ()=> handleUser(chatInput.value));
  chatInput.addEventListener('keydown', (e)=> { if(e.key==='Enter') handleUser(chatInput.value); });
  preset1.addEventListener('click', ()=> handleUser('How to upload?'));
  preset2.addEventListener('click', ()=> handleUser('What is expiry?'));

  // initial greeting
  appendMessage("Hi! I'm a local demo assistant. Ask about uploading, sharing links, expiry, or GitHub secrets. Try: 'How to upload?'", 'bot');

  // small helper
  function escapeHtml(s){
    return String(s).replace(/[&<>"']/g, ch => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[ch]));
  }
})(); /* chat IIFE */
</script>
</body>
</html>
